
audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002994  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000657c  08002b1c  08002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009098  08009098  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08009098  08009098  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009098  08009098  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009098  08009098  00019098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800909c  0800909c  0001909c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080090a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000000c  080090ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  080090ac  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae0c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001969  00000000  00000000  0002ae48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b48  00000000  00000000  0002c7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a70  00000000  00000000  0002d300  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a495  00000000  00000000  0002dd70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009ba0  00000000  00000000  00048205  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009d945  00000000  00000000  00051da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef6ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002efc  00000000  00000000  000ef768  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b04 	.word	0x08002b04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002b04 	.word	0x08002b04

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fa37 	bl	8000640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f81b 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f8f1 	bl	80003bc <MX_GPIO_Init>
  MX_DMA_Init();
 80001da:	f000 f8d1 	bl	8000380 <MX_DMA_Init>
  MX_DAC1_Init();
 80001de:	f000 f857 	bl	8000290 <MX_DAC1_Init>
  MX_TIM2_Init();
 80001e2:	f000 f87f 	bl	80002e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint16_t*)samples, LENGTH_SAMPLES, DAC_ALIGN_12B_R);
 80001e6:	2300      	movs	r3, #0
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	f243 23a5 	movw	r3, #12965	; 0x32a5
 80001ee:	4a04      	ldr	r2, [pc, #16]	; (8000200 <main+0x38>)
 80001f0:	2100      	movs	r1, #0
 80001f2:	4804      	ldr	r0, [pc, #16]	; (8000204 <main+0x3c>)
 80001f4:	f000 fbdc 	bl	80009b0 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <main+0x40>)
 80001fa:	f002 f9c9 	bl	8002590 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fe:	e7fe      	b.n	80001fe <main+0x36>
 8000200:	08002b1c 	.word	0x08002b1c
 8000204:	20000028 	.word	0x20000028
 8000208:	20000080 	.word	0x20000080

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b090      	sub	sp, #64	; 0x40
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0318 	add.w	r3, r7, #24
 8000216:	2228      	movs	r2, #40	; 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f002 fc6a 	bl	8002af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022e:	2302      	movs	r3, #2
 8000230:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000232:	2301      	movs	r3, #1
 8000234:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000236:	2310      	movs	r3, #16
 8000238:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023a:	2302      	movs	r3, #2
 800023c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800023e:	2300      	movs	r3, #0
 8000240:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000242:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000246:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000248:	f107 0318 	add.w	r3, r7, #24
 800024c:	4618      	mov	r0, r3
 800024e:	f001 f859 	bl	8001304 <HAL_RCC_OscConfig>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000258:	f000 f8c8 	bl	80003ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025c:	230f      	movs	r3, #15
 800025e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000260:	2302      	movs	r3, #2
 8000262:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f001 ff4c 	bl	8002114 <HAL_RCC_ClockConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000282:	f000 f8b3 	bl	80003ec <Error_Handler>
  }
}
 8000286:	bf00      	nop
 8000288:	3740      	adds	r7, #64	; 0x40
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80002a0:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <MX_DAC1_Init+0x4c>)
 80002a2:	4a0f      	ldr	r2, [pc, #60]	; (80002e0 <MX_DAC1_Init+0x50>)
 80002a4:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80002a6:	480d      	ldr	r0, [pc, #52]	; (80002dc <MX_DAC1_Init+0x4c>)
 80002a8:	f000 fb41 	bl	800092e <HAL_DAC_Init>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 80002b2:	f000 f89b 	bl	80003ec <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80002b6:	2324      	movs	r3, #36	; 0x24
 80002b8:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2200      	movs	r2, #0
 80002c2:	4619      	mov	r1, r3
 80002c4:	4805      	ldr	r0, [pc, #20]	; (80002dc <MX_DAC1_Init+0x4c>)
 80002c6:	f000 fc21 	bl	8000b0c <HAL_DAC_ConfigChannel>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 80002d0:	f000 f88c 	bl	80003ec <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80002d4:	bf00      	nop
 80002d6:	3710      	adds	r7, #16
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000028 	.word	0x20000028
 80002e0:	40007400 	.word	0x40007400

080002e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ea:	f107 0310 	add.w	r3, r7, #16
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000302:	4b1e      	ldr	r3, [pc, #120]	; (800037c <MX_TIM2_Init+0x98>)
 8000304:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000308:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800030a:	4b1c      	ldr	r3, [pc, #112]	; (800037c <MX_TIM2_Init+0x98>)
 800030c:	2201      	movs	r2, #1
 800030e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000310:	4b1a      	ldr	r3, [pc, #104]	; (800037c <MX_TIM2_Init+0x98>)
 8000312:	2200      	movs	r2, #0
 8000314:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500;
 8000316:	4b19      	ldr	r3, [pc, #100]	; (800037c <MX_TIM2_Init+0x98>)
 8000318:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800031c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800031e:	4b17      	ldr	r3, [pc, #92]	; (800037c <MX_TIM2_Init+0x98>)
 8000320:	2200      	movs	r2, #0
 8000322:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000324:	4b15      	ldr	r3, [pc, #84]	; (800037c <MX_TIM2_Init+0x98>)
 8000326:	2200      	movs	r2, #0
 8000328:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800032a:	4814      	ldr	r0, [pc, #80]	; (800037c <MX_TIM2_Init+0x98>)
 800032c:	f002 f8d8 	bl	80024e0 <HAL_TIM_Base_Init>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000336:	f000 f859 	bl	80003ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800033a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800033e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000340:	f107 0310 	add.w	r3, r7, #16
 8000344:	4619      	mov	r1, r3
 8000346:	480d      	ldr	r0, [pc, #52]	; (800037c <MX_TIM2_Init+0x98>)
 8000348:	f002 f976 	bl	8002638 <HAL_TIM_ConfigClockSource>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000352:	f000 f84b 	bl	80003ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000356:	2320      	movs	r3, #32
 8000358:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800035a:	2300      	movs	r3, #0
 800035c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	4619      	mov	r1, r3
 8000362:	4806      	ldr	r0, [pc, #24]	; (800037c <MX_TIM2_Init+0x98>)
 8000364:	f002 fb34 	bl	80029d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800036e:	f000 f83d 	bl	80003ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000372:	bf00      	nop
 8000374:	3720      	adds	r7, #32
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000080 	.word	0x20000080

08000380 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_DMA_Init+0x38>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a0b      	ldr	r2, [pc, #44]	; (80003b8 <MX_DMA_Init+0x38>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6153      	str	r3, [r2, #20]
 8000392:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_DMA_Init+0x38>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800039e:	2200      	movs	r2, #0
 80003a0:	2100      	movs	r1, #0
 80003a2:	200d      	movs	r0, #13
 80003a4:	f000 fa8d 	bl	80008c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80003a8:	200d      	movs	r0, #13
 80003aa:	f000 faa6 	bl	80008fa <HAL_NVIC_EnableIRQ>

}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40021000 	.word	0x40021000

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <MX_GPIO_Init+0x2c>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a08      	ldr	r2, [pc, #32]	; (80003e8 <MX_GPIO_Init+0x2c>)
 80003c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003cc:	6153      	str	r3, [r2, #20]
 80003ce:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <MX_GPIO_Init+0x2c>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]

}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000

080003ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f2:	e7fe      	b.n	80003f2 <Error_Handler+0x6>

080003f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <HAL_MspInit+0x44>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <HAL_MspInit+0x44>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6193      	str	r3, [r2, #24]
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <HAL_MspInit+0x44>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <HAL_MspInit+0x44>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	4a08      	ldr	r2, [pc, #32]	; (8000438 <HAL_MspInit+0x44>)
 8000418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800041c:	61d3      	str	r3, [r2, #28]
 800041e:	4b06      	ldr	r3, [pc, #24]	; (8000438 <HAL_MspInit+0x44>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000426:	603b      	str	r3, [r7, #0]
 8000428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	40021000 	.word	0x40021000

0800043c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b08a      	sub	sp, #40	; 0x28
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000444:	f107 0314 	add.w	r3, r7, #20
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	605a      	str	r2, [r3, #4]
 800044e:	609a      	str	r2, [r3, #8]
 8000450:	60da      	str	r2, [r3, #12]
 8000452:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a2d      	ldr	r2, [pc, #180]	; (8000510 <HAL_DAC_MspInit+0xd4>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d153      	bne.n	8000506 <HAL_DAC_MspInit+0xca>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800045e:	4b2d      	ldr	r3, [pc, #180]	; (8000514 <HAL_DAC_MspInit+0xd8>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	4a2c      	ldr	r2, [pc, #176]	; (8000514 <HAL_DAC_MspInit+0xd8>)
 8000464:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000468:	61d3      	str	r3, [r2, #28]
 800046a:	4b2a      	ldr	r3, [pc, #168]	; (8000514 <HAL_DAC_MspInit+0xd8>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000472:	613b      	str	r3, [r7, #16]
 8000474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000476:	4b27      	ldr	r3, [pc, #156]	; (8000514 <HAL_DAC_MspInit+0xd8>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	4a26      	ldr	r2, [pc, #152]	; (8000514 <HAL_DAC_MspInit+0xd8>)
 800047c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000480:	6153      	str	r3, [r2, #20]
 8000482:	4b24      	ldr	r3, [pc, #144]	; (8000514 <HAL_DAC_MspInit+0xd8>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800048e:	2310      	movs	r3, #16
 8000490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000492:	2303      	movs	r3, #3
 8000494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	2300      	movs	r3, #0
 8000498:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	4619      	mov	r1, r3
 80004a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a4:	f000 fdbc 	bl	8001020 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 80004a8:	4b1b      	ldr	r3, [pc, #108]	; (8000518 <HAL_DAC_MspInit+0xdc>)
 80004aa:	4a1c      	ldr	r2, [pc, #112]	; (800051c <HAL_DAC_MspInit+0xe0>)
 80004ac:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004ae:	4b1a      	ldr	r3, [pc, #104]	; (8000518 <HAL_DAC_MspInit+0xdc>)
 80004b0:	2210      	movs	r2, #16
 80004b2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80004b4:	4b18      	ldr	r3, [pc, #96]	; (8000518 <HAL_DAC_MspInit+0xdc>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80004ba:	4b17      	ldr	r3, [pc, #92]	; (8000518 <HAL_DAC_MspInit+0xdc>)
 80004bc:	2280      	movs	r2, #128	; 0x80
 80004be:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80004c0:	4b15      	ldr	r3, [pc, #84]	; (8000518 <HAL_DAC_MspInit+0xdc>)
 80004c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004c6:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80004c8:	4b13      	ldr	r3, [pc, #76]	; (8000518 <HAL_DAC_MspInit+0xdc>)
 80004ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004ce:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80004d0:	4b11      	ldr	r3, [pc, #68]	; (8000518 <HAL_DAC_MspInit+0xdc>)
 80004d2:	2220      	movs	r2, #32
 80004d4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <HAL_DAC_MspInit+0xdc>)
 80004d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80004de:	480e      	ldr	r0, [pc, #56]	; (8000518 <HAL_DAC_MspInit+0xdc>)
 80004e0:	f000 fc06 	bl	8000cf0 <HAL_DMA_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 80004ea:	f7ff ff7f 	bl	80003ec <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 80004ee:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <HAL_DAC_MspInit+0xe4>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <HAL_DAC_MspInit+0xe4>)
 80004f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004f8:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a06      	ldr	r2, [pc, #24]	; (8000518 <HAL_DAC_MspInit+0xdc>)
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	4a05      	ldr	r2, [pc, #20]	; (8000518 <HAL_DAC_MspInit+0xdc>)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000506:	bf00      	nop
 8000508:	3728      	adds	r7, #40	; 0x28
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40007400 	.word	0x40007400
 8000514:	40021000 	.word	0x40021000
 8000518:	2000003c 	.word	0x2000003c
 800051c:	40020030 	.word	0x40020030
 8000520:	40010000 	.word	0x40010000

08000524 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000534:	d10b      	bne.n	800054e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <HAL_TIM_Base_MspInit+0x38>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	4a08      	ldr	r2, [pc, #32]	; (800055c <HAL_TIM_Base_MspInit+0x38>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	61d3      	str	r3, [r2, #28]
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <HAL_TIM_Base_MspInit+0x38>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800054e:	bf00      	nop
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000

08000560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <NMI_Handler+0x4>

08000566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056a:	e7fe      	b.n	800056a <HardFault_Handler+0x4>

0800056c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <MemManage_Handler+0x4>

08000572 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000576:	e7fe      	b.n	8000576 <BusFault_Handler+0x4>

08000578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800057c:	e7fe      	b.n	800057c <UsageFault_Handler+0x4>

0800057e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ac:	f000 f88e 	bl	80006cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80005b8:	4802      	ldr	r0, [pc, #8]	; (80005c4 <DMA1_Channel3_IRQHandler+0x10>)
 80005ba:	f000 fc3f 	bl	8000e3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	2000003c 	.word	0x2000003c

080005c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <SystemInit+0x20>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005d2:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <SystemInit+0x20>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000624 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f0:	480d      	ldr	r0, [pc, #52]	; (8000628 <LoopForever+0x6>)
  ldr r1, =_edata
 80005f2:	490e      	ldr	r1, [pc, #56]	; (800062c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005f4:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <LoopForever+0xe>)
  movs r3, #0
 80005f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f8:	e002      	b.n	8000600 <LoopCopyDataInit>

080005fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fe:	3304      	adds	r3, #4

08000600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000604:	d3f9      	bcc.n	80005fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000606:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000608:	4c0b      	ldr	r4, [pc, #44]	; (8000638 <LoopForever+0x16>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800060c:	e001      	b.n	8000612 <LoopFillZerobss>

0800060e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000610:	3204      	adds	r2, #4

08000612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000614:	d3fb      	bcc.n	800060e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000616:	f7ff ffd7 	bl	80005c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800061a:	f002 fa47 	bl	8002aac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800061e:	f7ff fdd3 	bl	80001c8 <main>

08000622 <LoopForever>:

LoopForever:
    b LoopForever
 8000622:	e7fe      	b.n	8000622 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000624:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800062c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000630:	080090a0 	.word	0x080090a0
  ldr r2, =_sbss
 8000634:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000638:	200000d0 	.word	0x200000d0

0800063c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800063c:	e7fe      	b.n	800063c <ADC1_2_IRQHandler>
	...

08000640 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <HAL_Init+0x28>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a07      	ldr	r2, [pc, #28]	; (8000668 <HAL_Init+0x28>)
 800064a:	f043 0310 	orr.w	r3, r3, #16
 800064e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000650:	2003      	movs	r0, #3
 8000652:	f000 f92b 	bl	80008ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000656:	2000      	movs	r0, #0
 8000658:	f000 f808 	bl	800066c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800065c:	f7ff feca 	bl	80003f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000660:	2300      	movs	r3, #0
}
 8000662:	4618      	mov	r0, r3
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40022000 	.word	0x40022000

0800066c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <HAL_InitTick+0x54>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_InitTick+0x58>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4619      	mov	r1, r3
 800067e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000682:	fbb3 f3f1 	udiv	r3, r3, r1
 8000686:	fbb2 f3f3 	udiv	r3, r2, r3
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f943 	bl	8000916 <HAL_SYSTICK_Config>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000696:	2301      	movs	r3, #1
 8000698:	e00e      	b.n	80006b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b0f      	cmp	r3, #15
 800069e:	d80a      	bhi.n	80006b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a0:	2200      	movs	r2, #0
 80006a2:	6879      	ldr	r1, [r7, #4]
 80006a4:	f04f 30ff 	mov.w	r0, #4294967295
 80006a8:	f000 f90b 	bl	80008c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006ac:	4a06      	ldr	r2, [pc, #24]	; (80006c8 <HAL_InitTick+0x5c>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006b2:	2300      	movs	r3, #0
 80006b4:	e000      	b.n	80006b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000000 	.word	0x20000000
 80006c4:	20000008 	.word	0x20000008
 80006c8:	20000004 	.word	0x20000004

080006cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_IncTick+0x20>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_IncTick+0x24>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4413      	add	r3, r2
 80006dc:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <HAL_IncTick+0x24>)
 80006de:	6013      	str	r3, [r2, #0]
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000008 	.word	0x20000008
 80006f0:	200000cc 	.word	0x200000cc

080006f4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return uwTick;  
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <HAL_GetTick+0x14>)
 80006fa:	681b      	ldr	r3, [r3, #0]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	200000cc 	.word	0x200000cc

0800070c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <__NVIC_SetPriorityGrouping+0x44>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000722:	68ba      	ldr	r2, [r7, #8]
 8000724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000728:	4013      	ands	r3, r2
 800072a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800073c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800073e:	4a04      	ldr	r2, [pc, #16]	; (8000750 <__NVIC_SetPriorityGrouping+0x44>)
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	60d3      	str	r3, [r2, #12]
}
 8000744:	bf00      	nop
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <__NVIC_GetPriorityGrouping+0x18>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	0a1b      	lsrs	r3, r3, #8
 800075e:	f003 0307 	and.w	r3, r3, #7
}
 8000762:	4618      	mov	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	2b00      	cmp	r3, #0
 8000780:	db0b      	blt.n	800079a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	f003 021f 	and.w	r2, r3, #31
 8000788:	4907      	ldr	r1, [pc, #28]	; (80007a8 <__NVIC_EnableIRQ+0x38>)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	095b      	lsrs	r3, r3, #5
 8000790:	2001      	movs	r0, #1
 8000792:	fa00 f202 	lsl.w	r2, r0, r2
 8000796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000e100 	.word	0xe000e100

080007ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	6039      	str	r1, [r7, #0]
 80007b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	db0a      	blt.n	80007d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	490c      	ldr	r1, [pc, #48]	; (80007f8 <__NVIC_SetPriority+0x4c>)
 80007c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ca:	0112      	lsls	r2, r2, #4
 80007cc:	b2d2      	uxtb	r2, r2
 80007ce:	440b      	add	r3, r1
 80007d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d4:	e00a      	b.n	80007ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4908      	ldr	r1, [pc, #32]	; (80007fc <__NVIC_SetPriority+0x50>)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	f003 030f 	and.w	r3, r3, #15
 80007e2:	3b04      	subs	r3, #4
 80007e4:	0112      	lsls	r2, r2, #4
 80007e6:	b2d2      	uxtb	r2, r2
 80007e8:	440b      	add	r3, r1
 80007ea:	761a      	strb	r2, [r3, #24]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	e000e100 	.word	0xe000e100
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000800:	b480      	push	{r7}
 8000802:	b089      	sub	sp, #36	; 0x24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f003 0307 	and.w	r3, r3, #7
 8000812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	f1c3 0307 	rsb	r3, r3, #7
 800081a:	2b04      	cmp	r3, #4
 800081c:	bf28      	it	cs
 800081e:	2304      	movcs	r3, #4
 8000820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3304      	adds	r3, #4
 8000826:	2b06      	cmp	r3, #6
 8000828:	d902      	bls.n	8000830 <NVIC_EncodePriority+0x30>
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	3b03      	subs	r3, #3
 800082e:	e000      	b.n	8000832 <NVIC_EncodePriority+0x32>
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000834:	f04f 32ff 	mov.w	r2, #4294967295
 8000838:	69bb      	ldr	r3, [r7, #24]
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	43da      	mvns	r2, r3
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	401a      	ands	r2, r3
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000848:	f04f 31ff 	mov.w	r1, #4294967295
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	fa01 f303 	lsl.w	r3, r1, r3
 8000852:	43d9      	mvns	r1, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	4313      	orrs	r3, r2
         );
}
 800085a:	4618      	mov	r0, r3
 800085c:	3724      	adds	r7, #36	; 0x24
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
	...

08000868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3b01      	subs	r3, #1
 8000874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000878:	d301      	bcc.n	800087e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800087a:	2301      	movs	r3, #1
 800087c:	e00f      	b.n	800089e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <SysTick_Config+0x40>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3b01      	subs	r3, #1
 8000884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000886:	210f      	movs	r1, #15
 8000888:	f04f 30ff 	mov.w	r0, #4294967295
 800088c:	f7ff ff8e 	bl	80007ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <SysTick_Config+0x40>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000896:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <SysTick_Config+0x40>)
 8000898:	2207      	movs	r2, #7
 800089a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	e000e010 	.word	0xe000e010

080008ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff ff29 	bl	800070c <__NVIC_SetPriorityGrouping>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b086      	sub	sp, #24
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	4603      	mov	r3, r0
 80008ca:	60b9      	str	r1, [r7, #8]
 80008cc:	607a      	str	r2, [r7, #4]
 80008ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008d4:	f7ff ff3e 	bl	8000754 <__NVIC_GetPriorityGrouping>
 80008d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	68b9      	ldr	r1, [r7, #8]
 80008de:	6978      	ldr	r0, [r7, #20]
 80008e0:	f7ff ff8e 	bl	8000800 <NVIC_EncodePriority>
 80008e4:	4602      	mov	r2, r0
 80008e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff5d 	bl	80007ac <__NVIC_SetPriority>
}
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
 8000900:	4603      	mov	r3, r0
 8000902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff31 	bl	8000770 <__NVIC_EnableIRQ>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff ffa2 	bl	8000868 <SysTick_Config>
 8000924:	4603      	mov	r3, r0
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d101      	bne.n	8000940 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800093c:	2301      	movs	r3, #1
 800093e:	e014      	b.n	800096a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	791b      	ldrb	r3, [r3, #4]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d105      	bne.n	8000956 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2200      	movs	r2, #0
 800094e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff fd73 	bl	800043c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2202      	movs	r2, #2
 800095a:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2201      	movs	r2, #1
 8000966:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000972:	b480      	push	{r7}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
	...

080009b0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
 80009bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	795b      	ldrb	r3, [r3, #5]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d101      	bne.n	80009ce <HAL_DAC_Start_DMA+0x1e>
 80009ca:	2302      	movs	r3, #2
 80009cc:	e08e      	b.n	8000aec <HAL_DAC_Start_DMA+0x13c>
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	2201      	movs	r2, #1
 80009d2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2202      	movs	r2, #2
 80009d8:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d12a      	bne.n	8000a36 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	4a43      	ldr	r2, [pc, #268]	; (8000af4 <HAL_DAC_Start_DMA+0x144>)
 80009e6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	4a42      	ldr	r2, [pc, #264]	; (8000af8 <HAL_DAC_Start_DMA+0x148>)
 80009ee:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	4a41      	ldr	r2, [pc, #260]	; (8000afc <HAL_DAC_Start_DMA+0x14c>)
 80009f6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a06:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 8000a08:	6a3b      	ldr	r3, [r7, #32]
 8000a0a:	2b04      	cmp	r3, #4
 8000a0c:	d009      	beq.n	8000a22 <HAL_DAC_Start_DMA+0x72>
 8000a0e:	2b08      	cmp	r3, #8
 8000a10:	d00c      	beq.n	8000a2c <HAL_DAC_Start_DMA+0x7c>
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d000      	beq.n	8000a18 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000a16:	e039      	b.n	8000a8c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	3308      	adds	r3, #8
 8000a1e:	617b      	str	r3, [r7, #20]
        break;
 8000a20:	e034      	b.n	8000a8c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	330c      	adds	r3, #12
 8000a28:	617b      	str	r3, [r7, #20]
        break;
 8000a2a:	e02f      	b.n	8000a8c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	3310      	adds	r3, #16
 8000a32:	617b      	str	r3, [r7, #20]
        break;
 8000a34:	e02a      	b.n	8000a8c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	4a31      	ldr	r2, [pc, #196]	; (8000b00 <HAL_DAC_Start_DMA+0x150>)
 8000a3c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	4a30      	ldr	r2, [pc, #192]	; (8000b04 <HAL_DAC_Start_DMA+0x154>)
 8000a44:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	4a2f      	ldr	r2, [pc, #188]	; (8000b08 <HAL_DAC_Start_DMA+0x158>)
 8000a4c:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a5c:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8000a5e:	6a3b      	ldr	r3, [r7, #32]
 8000a60:	2b04      	cmp	r3, #4
 8000a62:	d009      	beq.n	8000a78 <HAL_DAC_Start_DMA+0xc8>
 8000a64:	2b08      	cmp	r3, #8
 8000a66:	d00c      	beq.n	8000a82 <HAL_DAC_Start_DMA+0xd2>
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d000      	beq.n	8000a6e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000a6c:	e00e      	b.n	8000a8c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	3314      	adds	r3, #20
 8000a74:	617b      	str	r3, [r7, #20]
        break;
 8000a76:	e009      	b.n	8000a8c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	3318      	adds	r3, #24
 8000a7e:	617b      	str	r3, [r7, #20]
        break;
 8000a80:	e004      	b.n	8000a8c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	331c      	adds	r3, #28
 8000a88:	617b      	str	r3, [r7, #20]
        break;
 8000a8a:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d10f      	bne.n	8000ab2 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000aa0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	6898      	ldr	r0, [r3, #8]
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	697a      	ldr	r2, [r7, #20]
 8000aac:	f000 f967 	bl	8000d7e <HAL_DMA_Start_IT>
 8000ab0:	e00e      	b.n	8000ad0 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000ac0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	68d8      	ldr	r0, [r3, #12]
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	f000 f957 	bl	8000d7e <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	6819      	ldr	r1, [r3, #0]
 8000adc:	2201      	movs	r2, #1
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	409a      	lsls	r2, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	08000c19 	.word	0x08000c19
 8000af8:	08000c3b 	.word	0x08000c3b
 8000afc:	08000c57 	.word	0x08000c57
 8000b00:	08000c85 	.word	0x08000c85
 8000b04:	08000ca7 	.word	0x08000ca7
 8000b08:	08000cc3 	.word	0x08000cc3

08000b0c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b087      	sub	sp, #28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	795b      	ldrb	r3, [r3, #5]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d101      	bne.n	8000b2c <HAL_DAC_ConfigChannel+0x20>
 8000b28:	2302      	movs	r3, #2
 8000b2a:	e04e      	b.n	8000bca <HAL_DAC_ConfigChannel+0xbe>
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	2202      	movs	r2, #2
 8000b36:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a24      	ldr	r2, [pc, #144]	; (8000bd8 <HAL_DAC_ConfigChannel+0xcc>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d112      	bne.n	8000b70 <HAL_DAC_ConfigChannel+0x64>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d10f      	bne.n	8000b70 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000b50:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	e00e      	b.n	8000b8e <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8000b70:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	697a      	ldr	r2, [r7, #20]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	6819      	ldr	r1, [r3, #0]
 8000baa:	22c0      	movs	r2, #192	; 0xc0
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	400a      	ands	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	371c      	adds	r7, #28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40007400 	.word	0x40007400

08000bdc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c24:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8000c26:	68f8      	ldr	r0, [r7, #12]
 8000c28:	f7ff fea3 	bl	8000972 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	711a      	strb	r2, [r3, #4]
}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b084      	sub	sp, #16
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c46:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8000c48:	68f8      	ldr	r0, [r7, #12]
 8000c4a:	f7ff fe9c 	bl	8000986 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b084      	sub	sp, #16
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c62:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	f043 0204 	orr.w	r2, r3, #4
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f7ff fe92 	bl	800099a <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	711a      	strb	r2, [r3, #4]
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c90:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8000c92:	68f8      	ldr	r0, [r7, #12]
 8000c94:	f7ff ffa2 	bl	8000bdc <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	711a      	strb	r2, [r3, #4]
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b084      	sub	sp, #16
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb2:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f7ff ff9b 	bl	8000bf0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b084      	sub	sp, #16
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cce:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	691b      	ldr	r3, [r3, #16]
 8000cd4:	f043 0204 	orr.w	r2, r3, #4
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8000cdc:	68f8      	ldr	r0, [r7, #12]
 8000cde:	f7ff ff91 	bl	8000c04 <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	711a      	strb	r2, [r3, #4]
}
 8000ce8:	bf00      	nop
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e037      	b.n	8000d76 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2202      	movs	r2, #2
 8000d0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d1c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d20:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	695b      	ldr	r3, [r3, #20]
 8000d3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	69db      	ldr	r3, [r3, #28]
 8000d48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	68fa      	ldr	r2, [r7, #12]
 8000d56:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f000 f941 	bl	8000fe0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2201      	movs	r2, #1
 8000d68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}  
 8000d76:	4618      	mov	r0, r3
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	60f8      	str	r0, [r7, #12]
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
 8000d8a:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d101      	bne.n	8000d9e <HAL_DMA_Start_IT+0x20>
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	e04a      	b.n	8000e34 <HAL_DMA_Start_IT+0xb6>
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2201      	movs	r2, #1
 8000da2:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d13a      	bne.n	8000e26 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2202      	movs	r2, #2
 8000db4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f022 0201 	bic.w	r2, r2, #1
 8000dcc:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	68b9      	ldr	r1, [r7, #8]
 8000dd4:	68f8      	ldr	r0, [r7, #12]
 8000dd6:	f000 f8d4 	bl	8000f82 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d008      	beq.n	8000df4 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f042 020e 	orr.w	r2, r2, #14
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	e00f      	b.n	8000e14 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f042 020a 	orr.w	r2, r2, #10
 8000e02:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f022 0204 	bic.w	r2, r2, #4
 8000e12:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f042 0201 	orr.w	r2, r2, #1
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	e005      	b.n	8000e32 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8000e32:	7dfb      	ldrb	r3, [r7, #23]
} 
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	2204      	movs	r2, #4
 8000e5a:	409a      	lsls	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d024      	beq.n	8000eae <HAL_DMA_IRQHandler+0x72>
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d01f      	beq.n	8000eae <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0320 	and.w	r3, r3, #32
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d107      	bne.n	8000e8c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0204 	bic.w	r2, r2, #4
 8000e8a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e94:	2104      	movs	r1, #4
 8000e96:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d06a      	beq.n	8000f7a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000eac:	e065      	b.n	8000f7a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	409a      	lsls	r2, r3
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d02c      	beq.n	8000f18 <HAL_DMA_IRQHandler+0xdc>
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d027      	beq.n	8000f18 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0320 	and.w	r3, r3, #32
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10b      	bne.n	8000eee <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f022 020a 	bic.w	r2, r2, #10
 8000ee4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8000efc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d035      	beq.n	8000f7a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000f16:	e030      	b.n	8000f7a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	2208      	movs	r2, #8
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d028      	beq.n	8000f7a <HAL_DMA_IRQHandler+0x13e>
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	f003 0308 	and.w	r3, r3, #8
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d023      	beq.n	8000f7a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f022 020e 	bic.w	r2, r2, #14
 8000f40:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f50:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d004      	beq.n	8000f7a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	4798      	blx	r3
    }
  }
}  
 8000f78:	e7ff      	b.n	8000f7a <HAL_DMA_IRQHandler+0x13e>
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b085      	sub	sp, #20
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f98:	2101      	movs	r1, #1
 8000f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2b10      	cmp	r3, #16
 8000fae:	d108      	bne.n	8000fc2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	68ba      	ldr	r2, [r7, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fc0:	e007      	b.n	8000fd2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	60da      	str	r2, [r3, #12]
}
 8000fd2:	bf00      	nop
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <DMA_CalcBaseAndBitshift+0x34>)
 8000ff0:	4413      	add	r3, r2
 8000ff2:	4a09      	ldr	r2, [pc, #36]	; (8001018 <DMA_CalcBaseAndBitshift+0x38>)
 8000ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff8:	091b      	lsrs	r3, r3, #4
 8000ffa:	009a      	lsls	r2, r3, #2
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a06      	ldr	r2, [pc, #24]	; (800101c <DMA_CalcBaseAndBitshift+0x3c>)
 8001004:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	bffdfff8 	.word	0xbffdfff8
 8001018:	cccccccd 	.word	0xcccccccd
 800101c:	40020000 	.word	0x40020000

08001020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001020:	b480      	push	{r7}
 8001022:	b087      	sub	sp, #28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800102e:	e14e      	b.n	80012ce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	2101      	movs	r1, #1
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	4013      	ands	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 8140 	beq.w	80012c8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d00b      	beq.n	8001068 <HAL_GPIO_Init+0x48>
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d007      	beq.n	8001068 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800105c:	2b11      	cmp	r3, #17
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2b12      	cmp	r3, #18
 8001066:	d130      	bne.n	80010ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800109e:	2201      	movs	r2, #1
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	091b      	lsrs	r3, r3, #4
 80010b4:	f003 0201 	and.w	r2, r3, #1
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	2203      	movs	r2, #3
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0xea>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b12      	cmp	r3, #18
 8001108:	d123      	bne.n	8001152 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	08da      	lsrs	r2, r3, #3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3208      	adds	r2, #8
 8001112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001116:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	220f      	movs	r2, #15
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	691a      	ldr	r2, [r3, #16]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	6939      	ldr	r1, [r7, #16]
 800114e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0203 	and.w	r2, r3, #3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 809a 	beq.w	80012c8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001194:	4b55      	ldr	r3, [pc, #340]	; (80012ec <HAL_GPIO_Init+0x2cc>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a54      	ldr	r2, [pc, #336]	; (80012ec <HAL_GPIO_Init+0x2cc>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b52      	ldr	r3, [pc, #328]	; (80012ec <HAL_GPIO_Init+0x2cc>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011ac:	4a50      	ldr	r2, [pc, #320]	; (80012f0 <HAL_GPIO_Init+0x2d0>)
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	089b      	lsrs	r3, r3, #2
 80011b2:	3302      	adds	r3, #2
 80011b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	220f      	movs	r2, #15
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011d6:	d013      	beq.n	8001200 <HAL_GPIO_Init+0x1e0>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a46      	ldr	r2, [pc, #280]	; (80012f4 <HAL_GPIO_Init+0x2d4>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d00d      	beq.n	80011fc <HAL_GPIO_Init+0x1dc>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a45      	ldr	r2, [pc, #276]	; (80012f8 <HAL_GPIO_Init+0x2d8>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d007      	beq.n	80011f8 <HAL_GPIO_Init+0x1d8>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a44      	ldr	r2, [pc, #272]	; (80012fc <HAL_GPIO_Init+0x2dc>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d101      	bne.n	80011f4 <HAL_GPIO_Init+0x1d4>
 80011f0:	2303      	movs	r3, #3
 80011f2:	e006      	b.n	8001202 <HAL_GPIO_Init+0x1e2>
 80011f4:	2305      	movs	r3, #5
 80011f6:	e004      	b.n	8001202 <HAL_GPIO_Init+0x1e2>
 80011f8:	2302      	movs	r3, #2
 80011fa:	e002      	b.n	8001202 <HAL_GPIO_Init+0x1e2>
 80011fc:	2301      	movs	r3, #1
 80011fe:	e000      	b.n	8001202 <HAL_GPIO_Init+0x1e2>
 8001200:	2300      	movs	r3, #0
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	f002 0203 	and.w	r2, r2, #3
 8001208:	0092      	lsls	r2, r2, #2
 800120a:	4093      	lsls	r3, r2
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001212:	4937      	ldr	r1, [pc, #220]	; (80012f0 <HAL_GPIO_Init+0x2d0>)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	3302      	adds	r3, #2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001220:	4b37      	ldr	r3, [pc, #220]	; (8001300 <HAL_GPIO_Init+0x2e0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001244:	4a2e      	ldr	r2, [pc, #184]	; (8001300 <HAL_GPIO_Init+0x2e0>)
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800124a:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <HAL_GPIO_Init+0x2e0>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	43db      	mvns	r3, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800126e:	4a24      	ldr	r2, [pc, #144]	; (8001300 <HAL_GPIO_Init+0x2e0>)
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001274:	4b22      	ldr	r3, [pc, #136]	; (8001300 <HAL_GPIO_Init+0x2e0>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	43db      	mvns	r3, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001298:	4a19      	ldr	r2, [pc, #100]	; (8001300 <HAL_GPIO_Init+0x2e0>)
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <HAL_GPIO_Init+0x2e0>)
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012c2:	4a0f      	ldr	r2, [pc, #60]	; (8001300 <HAL_GPIO_Init+0x2e0>)
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	3301      	adds	r3, #1
 80012cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	fa22 f303 	lsr.w	r3, r2, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f47f aea9 	bne.w	8001030 <HAL_GPIO_Init+0x10>
  }
}
 80012de:	bf00      	nop
 80012e0:	371c      	adds	r7, #28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010000 	.word	0x40010000
 80012f4:	48000400 	.word	0x48000400
 80012f8:	48000800 	.word	0x48000800
 80012fc:	48000c00 	.word	0x48000c00
 8001300:	40010400 	.word	0x40010400

08001304 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800130a:	af00      	add	r7, sp, #0
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d102      	bne.n	800131e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	f000 bef4 	b.w	8002106 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 816a 	beq.w	8001602 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800132e:	4bb3      	ldr	r3, [pc, #716]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	2b04      	cmp	r3, #4
 8001338:	d00c      	beq.n	8001354 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800133a:	4bb0      	ldr	r3, [pc, #704]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 030c 	and.w	r3, r3, #12
 8001342:	2b08      	cmp	r3, #8
 8001344:	d159      	bne.n	80013fa <HAL_RCC_OscConfig+0xf6>
 8001346:	4bad      	ldr	r3, [pc, #692]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001352:	d152      	bne.n	80013fa <HAL_RCC_OscConfig+0xf6>
 8001354:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001358:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001360:	fa93 f3a3 	rbit	r3, r3
 8001364:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001368:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136c:	fab3 f383 	clz	r3, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	095b      	lsrs	r3, r3, #5
 8001374:	b2db      	uxtb	r3, r3
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b01      	cmp	r3, #1
 800137e:	d102      	bne.n	8001386 <HAL_RCC_OscConfig+0x82>
 8001380:	4b9e      	ldr	r3, [pc, #632]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	e015      	b.n	80013b2 <HAL_RCC_OscConfig+0xae>
 8001386:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800138a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001392:	fa93 f3a3 	rbit	r3, r3
 8001396:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800139a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800139e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80013a2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80013a6:	fa93 f3a3 	rbit	r3, r3
 80013aa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80013ae:	4b93      	ldr	r3, [pc, #588]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013b6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80013ba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80013be:	fa92 f2a2 	rbit	r2, r2
 80013c2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80013c6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80013ca:	fab2 f282 	clz	r2, r2
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	f042 0220 	orr.w	r2, r2, #32
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	f002 021f 	and.w	r2, r2, #31
 80013da:	2101      	movs	r1, #1
 80013dc:	fa01 f202 	lsl.w	r2, r1, r2
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 810c 	beq.w	8001600 <HAL_RCC_OscConfig+0x2fc>
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f040 8106 	bne.w	8001600 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	f000 be86 	b.w	8002106 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001404:	d106      	bne.n	8001414 <HAL_RCC_OscConfig+0x110>
 8001406:	4b7d      	ldr	r3, [pc, #500]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a7c      	ldr	r2, [pc, #496]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 800140c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e030      	b.n	8001476 <HAL_RCC_OscConfig+0x172>
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10c      	bne.n	8001438 <HAL_RCC_OscConfig+0x134>
 800141e:	4b77      	ldr	r3, [pc, #476]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a76      	ldr	r2, [pc, #472]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	4b74      	ldr	r3, [pc, #464]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a73      	ldr	r2, [pc, #460]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001430:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e01e      	b.n	8001476 <HAL_RCC_OscConfig+0x172>
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001442:	d10c      	bne.n	800145e <HAL_RCC_OscConfig+0x15a>
 8001444:	4b6d      	ldr	r3, [pc, #436]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a6c      	ldr	r2, [pc, #432]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 800144a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	4b6a      	ldr	r3, [pc, #424]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a69      	ldr	r2, [pc, #420]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	e00b      	b.n	8001476 <HAL_RCC_OscConfig+0x172>
 800145e:	4b67      	ldr	r3, [pc, #412]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a66      	ldr	r2, [pc, #408]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b64      	ldr	r3, [pc, #400]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a63      	ldr	r2, [pc, #396]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001470:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001474:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001476:	4b61      	ldr	r3, [pc, #388]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147a:	f023 020f 	bic.w	r2, r3, #15
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	495d      	ldr	r1, [pc, #372]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001486:	4313      	orrs	r3, r2
 8001488:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d059      	beq.n	8001548 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff f92e 	bl	80006f4 <HAL_GetTick>
 8001498:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149c:	e00a      	b.n	80014b4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800149e:	f7ff f929 	bl	80006f4 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	d902      	bls.n	80014b4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	f000 be29 	b.w	8002106 <HAL_RCC_OscConfig+0xe02>
 80014b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014b8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014bc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80014c0:	fa93 f3a3 	rbit	r3, r3
 80014c4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80014c8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014cc:	fab3 f383 	clz	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	095b      	lsrs	r3, r3, #5
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d102      	bne.n	80014e6 <HAL_RCC_OscConfig+0x1e2>
 80014e0:	4b46      	ldr	r3, [pc, #280]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	e015      	b.n	8001512 <HAL_RCC_OscConfig+0x20e>
 80014e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ee:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80014f2:	fa93 f3a3 	rbit	r3, r3
 80014f6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80014fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014fe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001502:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001506:	fa93 f3a3 	rbit	r3, r3
 800150a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800150e:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001516:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800151a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800151e:	fa92 f2a2 	rbit	r2, r2
 8001522:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001526:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800152a:	fab2 f282 	clz	r2, r2
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	f042 0220 	orr.w	r2, r2, #32
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	f002 021f 	and.w	r2, r2, #31
 800153a:	2101      	movs	r1, #1
 800153c:	fa01 f202 	lsl.w	r2, r1, r2
 8001540:	4013      	ands	r3, r2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0ab      	beq.n	800149e <HAL_RCC_OscConfig+0x19a>
 8001546:	e05c      	b.n	8001602 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff f8d4 	bl	80006f4 <HAL_GetTick>
 800154c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001550:	e00a      	b.n	8001568 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001552:	f7ff f8cf 	bl	80006f4 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b64      	cmp	r3, #100	; 0x64
 8001560:	d902      	bls.n	8001568 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	f000 bdcf 	b.w	8002106 <HAL_RCC_OscConfig+0xe02>
 8001568:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800156c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001570:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001574:	fa93 f3a3 	rbit	r3, r3
 8001578:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800157c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001580:	fab3 f383 	clz	r3, r3
 8001584:	b2db      	uxtb	r3, r3
 8001586:	095b      	lsrs	r3, r3, #5
 8001588:	b2db      	uxtb	r3, r3
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b01      	cmp	r3, #1
 8001592:	d102      	bne.n	800159a <HAL_RCC_OscConfig+0x296>
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	e015      	b.n	80015c6 <HAL_RCC_OscConfig+0x2c2>
 800159a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800159e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80015a6:	fa93 f3a3 	rbit	r3, r3
 80015aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80015ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015b2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80015b6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80015ba:	fa93 f3a3 	rbit	r3, r3
 80015be:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015ca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80015ce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80015d2:	fa92 f2a2 	rbit	r2, r2
 80015d6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80015da:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80015de:	fab2 f282 	clz	r2, r2
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	f042 0220 	orr.w	r2, r2, #32
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	f002 021f 	and.w	r2, r2, #31
 80015ee:	2101      	movs	r1, #1
 80015f0:	fa01 f202 	lsl.w	r2, r1, r2
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1ab      	bne.n	8001552 <HAL_RCC_OscConfig+0x24e>
 80015fa:	e002      	b.n	8001602 <HAL_RCC_OscConfig+0x2fe>
 80015fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 816f 	beq.w	80018f0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001612:	4bd0      	ldr	r3, [pc, #832]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00b      	beq.n	8001636 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800161e:	4bcd      	ldr	r3, [pc, #820]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b08      	cmp	r3, #8
 8001628:	d16c      	bne.n	8001704 <HAL_RCC_OscConfig+0x400>
 800162a:	4bca      	ldr	r3, [pc, #808]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d166      	bne.n	8001704 <HAL_RCC_OscConfig+0x400>
 8001636:	2302      	movs	r3, #2
 8001638:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001640:	fa93 f3a3 	rbit	r3, r3
 8001644:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001648:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164c:	fab3 f383 	clz	r3, r3
 8001650:	b2db      	uxtb	r3, r3
 8001652:	095b      	lsrs	r3, r3, #5
 8001654:	b2db      	uxtb	r3, r3
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d102      	bne.n	8001666 <HAL_RCC_OscConfig+0x362>
 8001660:	4bbc      	ldr	r3, [pc, #752]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	e013      	b.n	800168e <HAL_RCC_OscConfig+0x38a>
 8001666:	2302      	movs	r3, #2
 8001668:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001670:	fa93 f3a3 	rbit	r3, r3
 8001674:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001678:	2302      	movs	r3, #2
 800167a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800167e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001682:	fa93 f3a3 	rbit	r3, r3
 8001686:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800168a:	4bb2      	ldr	r3, [pc, #712]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	2202      	movs	r2, #2
 8001690:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001694:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001698:	fa92 f2a2 	rbit	r2, r2
 800169c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80016a0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80016a4:	fab2 f282 	clz	r2, r2
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	f042 0220 	orr.w	r2, r2, #32
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	f002 021f 	and.w	r2, r2, #31
 80016b4:	2101      	movs	r1, #1
 80016b6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d007      	beq.n	80016d0 <HAL_RCC_OscConfig+0x3cc>
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d002      	beq.n	80016d0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	f000 bd1b 	b.w	8002106 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d0:	4ba0      	ldr	r3, [pc, #640]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	21f8      	movs	r1, #248	; 0xf8
 80016e0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80016e8:	fa91 f1a1 	rbit	r1, r1
 80016ec:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80016f0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80016f4:	fab1 f181 	clz	r1, r1
 80016f8:	b2c9      	uxtb	r1, r1
 80016fa:	408b      	lsls	r3, r1
 80016fc:	4995      	ldr	r1, [pc, #596]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001702:	e0f5      	b.n	80018f0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 8085 	beq.w	800181a <HAL_RCC_OscConfig+0x516>
 8001710:	2301      	movs	r3, #1
 8001712:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001716:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800171a:	fa93 f3a3 	rbit	r3, r3
 800171e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001722:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001726:	fab3 f383 	clz	r3, r3
 800172a:	b2db      	uxtb	r3, r3
 800172c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001730:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	461a      	mov	r2, r3
 8001738:	2301      	movs	r3, #1
 800173a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7fe ffda 	bl	80006f4 <HAL_GetTick>
 8001740:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001744:	e00a      	b.n	800175c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001746:	f7fe ffd5 	bl	80006f4 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d902      	bls.n	800175c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	f000 bcd5 	b.w	8002106 <HAL_RCC_OscConfig+0xe02>
 800175c:	2302      	movs	r3, #2
 800175e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001762:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001766:	fa93 f3a3 	rbit	r3, r3
 800176a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800176e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001772:	fab3 f383 	clz	r3, r3
 8001776:	b2db      	uxtb	r3, r3
 8001778:	095b      	lsrs	r3, r3, #5
 800177a:	b2db      	uxtb	r3, r3
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b01      	cmp	r3, #1
 8001784:	d102      	bne.n	800178c <HAL_RCC_OscConfig+0x488>
 8001786:	4b73      	ldr	r3, [pc, #460]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	e013      	b.n	80017b4 <HAL_RCC_OscConfig+0x4b0>
 800178c:	2302      	movs	r3, #2
 800178e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001796:	fa93 f3a3 	rbit	r3, r3
 800179a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800179e:	2302      	movs	r3, #2
 80017a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80017a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80017a8:	fa93 f3a3 	rbit	r3, r3
 80017ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80017b0:	4b68      	ldr	r3, [pc, #416]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	2202      	movs	r2, #2
 80017b6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80017ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80017be:	fa92 f2a2 	rbit	r2, r2
 80017c2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80017c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80017ca:	fab2 f282 	clz	r2, r2
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	f042 0220 	orr.w	r2, r2, #32
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	f002 021f 	and.w	r2, r2, #31
 80017da:	2101      	movs	r1, #1
 80017dc:	fa01 f202 	lsl.w	r2, r1, r2
 80017e0:	4013      	ands	r3, r2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0af      	beq.n	8001746 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e6:	4b5b      	ldr	r3, [pc, #364]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	21f8      	movs	r1, #248	; 0xf8
 80017f6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80017fe:	fa91 f1a1 	rbit	r1, r1
 8001802:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001806:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800180a:	fab1 f181 	clz	r1, r1
 800180e:	b2c9      	uxtb	r1, r1
 8001810:	408b      	lsls	r3, r1
 8001812:	4950      	ldr	r1, [pc, #320]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 8001814:	4313      	orrs	r3, r2
 8001816:	600b      	str	r3, [r1, #0]
 8001818:	e06a      	b.n	80018f0 <HAL_RCC_OscConfig+0x5ec>
 800181a:	2301      	movs	r3, #1
 800181c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001820:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001824:	fa93 f3a3 	rbit	r3, r3
 8001828:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800182c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001830:	fab3 f383 	clz	r3, r3
 8001834:	b2db      	uxtb	r3, r3
 8001836:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800183a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	461a      	mov	r2, r3
 8001842:	2300      	movs	r3, #0
 8001844:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001846:	f7fe ff55 	bl	80006f4 <HAL_GetTick>
 800184a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184e:	e00a      	b.n	8001866 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001850:	f7fe ff50 	bl	80006f4 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d902      	bls.n	8001866 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	f000 bc50 	b.w	8002106 <HAL_RCC_OscConfig+0xe02>
 8001866:	2302      	movs	r3, #2
 8001868:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001870:	fa93 f3a3 	rbit	r3, r3
 8001874:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187c:	fab3 f383 	clz	r3, r3
 8001880:	b2db      	uxtb	r3, r3
 8001882:	095b      	lsrs	r3, r3, #5
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b01      	cmp	r3, #1
 800188e:	d102      	bne.n	8001896 <HAL_RCC_OscConfig+0x592>
 8001890:	4b30      	ldr	r3, [pc, #192]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	e013      	b.n	80018be <HAL_RCC_OscConfig+0x5ba>
 8001896:	2302      	movs	r3, #2
 8001898:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018a0:	fa93 f3a3 	rbit	r3, r3
 80018a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80018a8:	2302      	movs	r3, #2
 80018aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80018ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018b2:	fa93 f3a3 	rbit	r3, r3
 80018b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80018ba:	4b26      	ldr	r3, [pc, #152]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	2202      	movs	r2, #2
 80018c0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80018c4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80018c8:	fa92 f2a2 	rbit	r2, r2
 80018cc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80018d0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80018d4:	fab2 f282 	clz	r2, r2
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	f042 0220 	orr.w	r2, r2, #32
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	f002 021f 	and.w	r2, r2, #31
 80018e4:	2101      	movs	r1, #1
 80018e6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1af      	bne.n	8001850 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 80da 	beq.w	8001ab4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d069      	beq.n	80019de <HAL_RCC_OscConfig+0x6da>
 800190a:	2301      	movs	r3, #1
 800190c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001914:	fa93 f3a3 	rbit	r3, r3
 8001918:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800191c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001920:	fab3 f383 	clz	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_RCC_OscConfig+0x654>)
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	461a      	mov	r2, r3
 8001930:	2301      	movs	r3, #1
 8001932:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001934:	f7fe fede 	bl	80006f4 <HAL_GetTick>
 8001938:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193c:	e00e      	b.n	800195c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800193e:	f7fe fed9 	bl	80006f4 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d906      	bls.n	800195c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e3d9      	b.n	8002106 <HAL_RCC_OscConfig+0xe02>
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
 8001958:	10908120 	.word	0x10908120
 800195c:	2302      	movs	r3, #2
 800195e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001962:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001966:	fa93 f3a3 	rbit	r3, r3
 800196a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800196e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001972:	2202      	movs	r2, #2
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	fa93 f2a3 	rbit	r2, r3
 8001980:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800198a:	2202      	movs	r2, #2
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	fa93 f2a3 	rbit	r2, r3
 8001998:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800199c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199e:	4ba5      	ldr	r3, [pc, #660]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 80019a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019a6:	2102      	movs	r1, #2
 80019a8:	6019      	str	r1, [r3, #0]
 80019aa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	fa93 f1a3 	rbit	r1, r3
 80019b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019b8:	6019      	str	r1, [r3, #0]
  return result;
 80019ba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	fab3 f383 	clz	r3, r3
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	f003 031f 	and.w	r3, r3, #31
 80019d0:	2101      	movs	r1, #1
 80019d2:	fa01 f303 	lsl.w	r3, r1, r3
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0b0      	beq.n	800193e <HAL_RCC_OscConfig+0x63a>
 80019dc:	e06a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7b0>
 80019de:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80019e2:	2201      	movs	r2, #1
 80019e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	fa93 f2a3 	rbit	r2, r3
 80019f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019f4:	601a      	str	r2, [r3, #0]
  return result;
 80019f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019fa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b8c      	ldr	r3, [pc, #560]	; (8001c38 <HAL_RCC_OscConfig+0x934>)
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a10:	f7fe fe70 	bl	80006f4 <HAL_GetTick>
 8001a14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a18:	e009      	b.n	8001a2e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a1a:	f7fe fe6b 	bl	80006f4 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e36b      	b.n	8002106 <HAL_RCC_OscConfig+0xe02>
 8001a2e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a32:	2202      	movs	r2, #2
 8001a34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	fa93 f2a3 	rbit	r2, r3
 8001a40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	fa93 f2a3 	rbit	r2, r3
 8001a58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a62:	2202      	movs	r2, #2
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	fa93 f2a3 	rbit	r2, r3
 8001a70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a74:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a76:	4b6f      	ldr	r3, [pc, #444]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001a78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a7a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a7e:	2102      	movs	r1, #2
 8001a80:	6019      	str	r1, [r3, #0]
 8001a82:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	fa93 f1a3 	rbit	r1, r3
 8001a8c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a90:	6019      	str	r1, [r3, #0]
  return result;
 8001a92:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	fab3 f383 	clz	r3, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	f003 031f 	and.w	r3, r3, #31
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1b2      	bne.n	8001a1a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 8158 	beq.w	8001d74 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aca:	4b5a      	ldr	r3, [pc, #360]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d112      	bne.n	8001afc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	4b57      	ldr	r3, [pc, #348]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4a56      	ldr	r2, [pc, #344]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	61d3      	str	r3, [r2, #28]
 8001ae2:	4b54      	ldr	r3, [pc, #336]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001aea:	f107 0308 	add.w	r3, r7, #8
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	f107 0308 	add.w	r3, r7, #8
 8001af4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001af6:	2301      	movs	r3, #1
 8001af8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afc:	4b4f      	ldr	r3, [pc, #316]	; (8001c3c <HAL_RCC_OscConfig+0x938>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d11a      	bne.n	8001b3e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b08:	4b4c      	ldr	r3, [pc, #304]	; (8001c3c <HAL_RCC_OscConfig+0x938>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a4b      	ldr	r2, [pc, #300]	; (8001c3c <HAL_RCC_OscConfig+0x938>)
 8001b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b12:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b14:	f7fe fdee 	bl	80006f4 <HAL_GetTick>
 8001b18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1c:	e009      	b.n	8001b32 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1e:	f7fe fde9 	bl	80006f4 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	; 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e2e9      	b.n	8002106 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b32:	4b42      	ldr	r3, [pc, #264]	; (8001c3c <HAL_RCC_OscConfig+0x938>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0ef      	beq.n	8001b1e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d106      	bne.n	8001b56 <HAL_RCC_OscConfig+0x852>
 8001b48:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	4a39      	ldr	r2, [pc, #228]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6213      	str	r3, [r2, #32]
 8001b54:	e02f      	b.n	8001bb6 <HAL_RCC_OscConfig+0x8b2>
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10c      	bne.n	8001b7a <HAL_RCC_OscConfig+0x876>
 8001b60:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	4a33      	ldr	r2, [pc, #204]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001b66:	f023 0301 	bic.w	r3, r3, #1
 8001b6a:	6213      	str	r3, [r2, #32]
 8001b6c:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	4a30      	ldr	r2, [pc, #192]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001b72:	f023 0304 	bic.w	r3, r3, #4
 8001b76:	6213      	str	r3, [r2, #32]
 8001b78:	e01d      	b.n	8001bb6 <HAL_RCC_OscConfig+0x8b2>
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	2b05      	cmp	r3, #5
 8001b82:	d10c      	bne.n	8001b9e <HAL_RCC_OscConfig+0x89a>
 8001b84:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	4a2a      	ldr	r2, [pc, #168]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001b8a:	f043 0304 	orr.w	r3, r3, #4
 8001b8e:	6213      	str	r3, [r2, #32]
 8001b90:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	4a27      	ldr	r2, [pc, #156]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6213      	str	r3, [r2, #32]
 8001b9c:	e00b      	b.n	8001bb6 <HAL_RCC_OscConfig+0x8b2>
 8001b9e:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4a24      	ldr	r2, [pc, #144]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	6213      	str	r3, [r2, #32]
 8001baa:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4a21      	ldr	r2, [pc, #132]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001bb0:	f023 0304 	bic.w	r3, r3, #4
 8001bb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d06b      	beq.n	8001c98 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc0:	f7fe fd98 	bl	80006f4 <HAL_GetTick>
 8001bc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc8:	e00b      	b.n	8001be2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f7fe fd93 	bl	80006f4 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e291      	b.n	8002106 <HAL_RCC_OscConfig+0xe02>
 8001be2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001be6:	2202      	movs	r2, #2
 8001be8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	fa93 f2a3 	rbit	r2, r3
 8001bf4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001bfe:	2202      	movs	r2, #2
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	fa93 f2a3 	rbit	r2, r3
 8001c0c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c10:	601a      	str	r2, [r3, #0]
  return result;
 8001c12:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c16:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c18:	fab3 f383 	clz	r3, r3
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	f043 0302 	orr.w	r3, r3, #2
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d109      	bne.n	8001c40 <HAL_RCC_OscConfig+0x93c>
 8001c2c:	4b01      	ldr	r3, [pc, #4]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	e014      	b.n	8001c5c <HAL_RCC_OscConfig+0x958>
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	10908120 	.word	0x10908120
 8001c3c:	40007000 	.word	0x40007000
 8001c40:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c44:	2202      	movs	r2, #2
 8001c46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	fa93 f2a3 	rbit	r2, r3
 8001c52:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	4bbb      	ldr	r3, [pc, #748]	; (8001f48 <HAL_RCC_OscConfig+0xc44>)
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c60:	2102      	movs	r1, #2
 8001c62:	6011      	str	r1, [r2, #0]
 8001c64:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	fa92 f1a2 	rbit	r1, r2
 8001c6e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001c72:	6011      	str	r1, [r2, #0]
  return result;
 8001c74:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	fab2 f282 	clz	r2, r2
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	f002 021f 	and.w	r2, r2, #31
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d099      	beq.n	8001bca <HAL_RCC_OscConfig+0x8c6>
 8001c96:	e063      	b.n	8001d60 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c98:	f7fe fd2c 	bl	80006f4 <HAL_GetTick>
 8001c9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca0:	e00b      	b.n	8001cba <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca2:	f7fe fd27 	bl	80006f4 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e225      	b.n	8002106 <HAL_RCC_OscConfig+0xe02>
 8001cba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	fa93 f2a3 	rbit	r2, r3
 8001ccc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	fa93 f2a3 	rbit	r2, r3
 8001ce4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ce8:	601a      	str	r2, [r3, #0]
  return result;
 8001cea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf0:	fab3 f383 	clz	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	f043 0302 	orr.w	r3, r3, #2
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d102      	bne.n	8001d0a <HAL_RCC_OscConfig+0xa06>
 8001d04:	4b90      	ldr	r3, [pc, #576]	; (8001f48 <HAL_RCC_OscConfig+0xc44>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	e00d      	b.n	8001d26 <HAL_RCC_OscConfig+0xa22>
 8001d0a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d0e:	2202      	movs	r2, #2
 8001d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	fa93 f2a3 	rbit	r2, r3
 8001d1c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	4b89      	ldr	r3, [pc, #548]	; (8001f48 <HAL_RCC_OscConfig+0xc44>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	6011      	str	r1, [r2, #0]
 8001d2e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	fa92 f1a2 	rbit	r1, r2
 8001d38:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001d3c:	6011      	str	r1, [r2, #0]
  return result;
 8001d3e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	fab2 f282 	clz	r2, r2
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	f002 021f 	and.w	r2, r2, #31
 8001d54:	2101      	movs	r1, #1
 8001d56:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1a0      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d60:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d105      	bne.n	8001d74 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d68:	4b77      	ldr	r3, [pc, #476]	; (8001f48 <HAL_RCC_OscConfig+0xc44>)
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	4a76      	ldr	r2, [pc, #472]	; (8001f48 <HAL_RCC_OscConfig+0xc44>)
 8001d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d72:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 81c2 	beq.w	8002104 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d80:	4b71      	ldr	r3, [pc, #452]	; (8001f48 <HAL_RCC_OscConfig+0xc44>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	f000 819c 	beq.w	80020c6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	f040 8114 	bne.w	8001fc2 <HAL_RCC_OscConfig+0xcbe>
 8001d9a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001da2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	fa93 f2a3 	rbit	r2, r3
 8001dae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001db2:	601a      	str	r2, [r3, #0]
  return result;
 8001db4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001db8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dba:	fab3 f383 	clz	r3, r3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	461a      	mov	r2, r3
 8001dcc:	2300      	movs	r3, #0
 8001dce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7fe fc90 	bl	80006f4 <HAL_GetTick>
 8001dd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd8:	e009      	b.n	8001dee <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dda:	f7fe fc8b 	bl	80006f4 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e18b      	b.n	8002106 <HAL_RCC_OscConfig+0xe02>
 8001dee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001df2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001df6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	fa93 f2a3 	rbit	r2, r3
 8001e02:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e06:	601a      	str	r2, [r3, #0]
  return result;
 8001e08:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	095b      	lsrs	r3, r3, #5
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d102      	bne.n	8001e28 <HAL_RCC_OscConfig+0xb24>
 8001e22:	4b49      	ldr	r3, [pc, #292]	; (8001f48 <HAL_RCC_OscConfig+0xc44>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	e01b      	b.n	8001e60 <HAL_RCC_OscConfig+0xb5c>
 8001e28:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	fa93 f2a3 	rbit	r2, r3
 8001e3c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	fa93 f2a3 	rbit	r2, r3
 8001e56:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	4b3a      	ldr	r3, [pc, #232]	; (8001f48 <HAL_RCC_OscConfig+0xc44>)
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e68:	6011      	str	r1, [r2, #0]
 8001e6a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	fa92 f1a2 	rbit	r1, r2
 8001e74:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e78:	6011      	str	r1, [r2, #0]
  return result;
 8001e7a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	fab2 f282 	clz	r2, r2
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	f042 0220 	orr.w	r2, r2, #32
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	f002 021f 	and.w	r2, r2, #31
 8001e90:	2101      	movs	r1, #1
 8001e92:	fa01 f202 	lsl.w	r2, r1, r2
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d19e      	bne.n	8001dda <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e9c:	4b2a      	ldr	r3, [pc, #168]	; (8001f48 <HAL_RCC_OscConfig+0xc44>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	4925      	ldr	r1, [pc, #148]	; (8001f48 <HAL_RCC_OscConfig+0xc44>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]
 8001eb8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ebc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ec0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	fa93 f2a3 	rbit	r2, r3
 8001ecc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ed0:	601a      	str	r2, [r3, #0]
  return result;
 8001ed2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ed6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed8:	fab3 f383 	clz	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ee2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	461a      	mov	r2, r3
 8001eea:	2301      	movs	r3, #1
 8001eec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eee:	f7fe fc01 	bl	80006f4 <HAL_GetTick>
 8001ef2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef6:	e009      	b.n	8001f0c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7fe fbfc 	bl	80006f4 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e0fc      	b.n	8002106 <HAL_RCC_OscConfig+0xe02>
 8001f0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	fa93 f2a3 	rbit	r2, r3
 8001f20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f24:	601a      	str	r2, [r3, #0]
  return result;
 8001f26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f2c:	fab3 f383 	clz	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d105      	bne.n	8001f4c <HAL_RCC_OscConfig+0xc48>
 8001f40:	4b01      	ldr	r3, [pc, #4]	; (8001f48 <HAL_RCC_OscConfig+0xc44>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	e01e      	b.n	8001f84 <HAL_RCC_OscConfig+0xc80>
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	fa93 f2a3 	rbit	r2, r3
 8001f60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	fa93 f2a3 	rbit	r2, r3
 8001f7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	4b63      	ldr	r3, [pc, #396]	; (8002110 <HAL_RCC_OscConfig+0xe0c>)
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f8c:	6011      	str	r1, [r2, #0]
 8001f8e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	fa92 f1a2 	rbit	r1, r2
 8001f98:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f9c:	6011      	str	r1, [r2, #0]
  return result;
 8001f9e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	fab2 f282 	clz	r2, r2
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	f042 0220 	orr.w	r2, r2, #32
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	f002 021f 	and.w	r2, r2, #31
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d09b      	beq.n	8001ef8 <HAL_RCC_OscConfig+0xbf4>
 8001fc0:	e0a0      	b.n	8002104 <HAL_RCC_OscConfig+0xe00>
 8001fc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	fa93 f2a3 	rbit	r2, r3
 8001fd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fda:	601a      	str	r2, [r3, #0]
  return result;
 8001fdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fe0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe2:	fab3 f383 	clz	r3, r3
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7fe fb7c 	bl	80006f4 <HAL_GetTick>
 8001ffc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002000:	e009      	b.n	8002016 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002002:	f7fe fb77 	bl	80006f4 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e077      	b.n	8002106 <HAL_RCC_OscConfig+0xe02>
 8002016:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800201a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800201e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	fa93 f2a3 	rbit	r2, r3
 800202a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800202e:	601a      	str	r2, [r3, #0]
  return result;
 8002030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002034:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	095b      	lsrs	r3, r3, #5
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b01      	cmp	r3, #1
 8002048:	d102      	bne.n	8002050 <HAL_RCC_OscConfig+0xd4c>
 800204a:	4b31      	ldr	r3, [pc, #196]	; (8002110 <HAL_RCC_OscConfig+0xe0c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	e01b      	b.n	8002088 <HAL_RCC_OscConfig+0xd84>
 8002050:	f107 0320 	add.w	r3, r7, #32
 8002054:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002058:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	f107 0320 	add.w	r3, r7, #32
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	fa93 f2a3 	rbit	r2, r3
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	f107 0318 	add.w	r3, r7, #24
 800206e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	f107 0318 	add.w	r3, r7, #24
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	fa93 f2a3 	rbit	r2, r3
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	4b22      	ldr	r3, [pc, #136]	; (8002110 <HAL_RCC_OscConfig+0xe0c>)
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	f107 0210 	add.w	r2, r7, #16
 800208c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002090:	6011      	str	r1, [r2, #0]
 8002092:	f107 0210 	add.w	r2, r7, #16
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	fa92 f1a2 	rbit	r1, r2
 800209c:	f107 020c 	add.w	r2, r7, #12
 80020a0:	6011      	str	r1, [r2, #0]
  return result;
 80020a2:	f107 020c 	add.w	r2, r7, #12
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	fab2 f282 	clz	r2, r2
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	f042 0220 	orr.w	r2, r2, #32
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	f002 021f 	and.w	r2, r2, #31
 80020b8:	2101      	movs	r1, #1
 80020ba:	fa01 f202 	lsl.w	r2, r1, r2
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d19e      	bne.n	8002002 <HAL_RCC_OscConfig+0xcfe>
 80020c4:	e01e      	b.n	8002104 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c6:	1d3b      	adds	r3, r7, #4
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e018      	b.n	8002106 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020d4:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <HAL_RCC_OscConfig+0xe0c>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d108      	bne.n	8002100 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80020ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000

08002114 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b09e      	sub	sp, #120	; 0x78
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e162      	b.n	80023f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800212c:	4b90      	ldr	r3, [pc, #576]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d910      	bls.n	800215c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b8d      	ldr	r3, [pc, #564]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 0207 	bic.w	r2, r3, #7
 8002142:	498b      	ldr	r1, [pc, #556]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	4b89      	ldr	r3, [pc, #548]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e14a      	b.n	80023f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002168:	4b82      	ldr	r3, [pc, #520]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	497f      	ldr	r1, [pc, #508]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 80dc 	beq.w	8002340 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d13c      	bne.n	800220a <HAL_RCC_ClockConfig+0xf6>
 8002190:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002194:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002198:	fa93 f3a3 	rbit	r3, r3
 800219c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800219e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a0:	fab3 f383 	clz	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d102      	bne.n	80021ba <HAL_RCC_ClockConfig+0xa6>
 80021b4:	4b6f      	ldr	r3, [pc, #444]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	e00f      	b.n	80021da <HAL_RCC_ClockConfig+0xc6>
 80021ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	667b      	str	r3, [r7, #100]	; 0x64
 80021c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021cc:	663b      	str	r3, [r7, #96]	; 0x60
 80021ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021d0:	fa93 f3a3 	rbit	r3, r3
 80021d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021d6:	4b67      	ldr	r3, [pc, #412]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021de:	65ba      	str	r2, [r7, #88]	; 0x58
 80021e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021e2:	fa92 f2a2 	rbit	r2, r2
 80021e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80021e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021ea:	fab2 f282 	clz	r2, r2
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	f042 0220 	orr.w	r2, r2, #32
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	f002 021f 	and.w	r2, r2, #31
 80021fa:	2101      	movs	r1, #1
 80021fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d17b      	bne.n	80022fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e0f3      	b.n	80023f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d13c      	bne.n	800228c <HAL_RCC_ClockConfig+0x178>
 8002212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002216:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	095b      	lsrs	r3, r3, #5
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d102      	bne.n	800223c <HAL_RCC_ClockConfig+0x128>
 8002236:	4b4f      	ldr	r3, [pc, #316]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	e00f      	b.n	800225c <HAL_RCC_ClockConfig+0x148>
 800223c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002240:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	647b      	str	r3, [r7, #68]	; 0x44
 800224a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800224e:	643b      	str	r3, [r7, #64]	; 0x40
 8002250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002252:	fa93 f3a3 	rbit	r3, r3
 8002256:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002258:	4b46      	ldr	r3, [pc, #280]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002260:	63ba      	str	r2, [r7, #56]	; 0x38
 8002262:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002264:	fa92 f2a2 	rbit	r2, r2
 8002268:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800226a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800226c:	fab2 f282 	clz	r2, r2
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	f042 0220 	orr.w	r2, r2, #32
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	f002 021f 	and.w	r2, r2, #31
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f202 	lsl.w	r2, r1, r2
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d13a      	bne.n	80022fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0b2      	b.n	80023f2 <HAL_RCC_ClockConfig+0x2de>
 800228c:	2302      	movs	r3, #2
 800228e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	095b      	lsrs	r3, r3, #5
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d102      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x1a0>
 80022ae:	4b31      	ldr	r3, [pc, #196]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	e00d      	b.n	80022d0 <HAL_RCC_ClockConfig+0x1bc>
 80022b4:	2302      	movs	r3, #2
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	fa93 f3a3 	rbit	r3, r3
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
 80022c0:	2302      	movs	r3, #2
 80022c2:	623b      	str	r3, [r7, #32]
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	4b29      	ldr	r3, [pc, #164]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	2202      	movs	r2, #2
 80022d2:	61ba      	str	r2, [r7, #24]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	fa92 f2a2 	rbit	r2, r2
 80022da:	617a      	str	r2, [r7, #20]
  return result;
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	fab2 f282 	clz	r2, r2
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	f042 0220 	orr.w	r2, r2, #32
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	f002 021f 	and.w	r2, r2, #31
 80022ee:	2101      	movs	r1, #1
 80022f0:	fa01 f202 	lsl.w	r2, r1, r2
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e079      	b.n	80023f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022fe:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f023 0203 	bic.w	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	491a      	ldr	r1, [pc, #104]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002310:	f7fe f9f0 	bl	80006f4 <HAL_GetTick>
 8002314:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002316:	e00a      	b.n	800232e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002318:	f7fe f9ec 	bl	80006f4 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	; 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e061      	b.n	80023f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 020c 	and.w	r2, r3, #12
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	429a      	cmp	r2, r3
 800233e:	d1eb      	bne.n	8002318 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d214      	bcs.n	8002378 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 0207 	bic.w	r2, r3, #7
 8002356:	4906      	ldr	r1, [pc, #24]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b04      	ldr	r3, [pc, #16]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e040      	b.n	80023f2 <HAL_RCC_ClockConfig+0x2de>
 8002370:	40022000 	.word	0x40022000
 8002374:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002384:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <HAL_RCC_ClockConfig+0x2e8>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	491a      	ldr	r1, [pc, #104]	; (80023fc <HAL_RCC_ClockConfig+0x2e8>)
 8002392:	4313      	orrs	r3, r2
 8002394:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d009      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023a2:	4b16      	ldr	r3, [pc, #88]	; (80023fc <HAL_RCC_ClockConfig+0x2e8>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4912      	ldr	r1, [pc, #72]	; (80023fc <HAL_RCC_ClockConfig+0x2e8>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023b6:	f000 f829 	bl	800240c <HAL_RCC_GetSysClockFreq>
 80023ba:	4601      	mov	r1, r0
 80023bc:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <HAL_RCC_ClockConfig+0x2e8>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023c4:	22f0      	movs	r2, #240	; 0xf0
 80023c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	fa92 f2a2 	rbit	r2, r2
 80023ce:	60fa      	str	r2, [r7, #12]
  return result;
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	fab2 f282 	clz	r2, r2
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	40d3      	lsrs	r3, r2
 80023da:	4a09      	ldr	r2, [pc, #36]	; (8002400 <HAL_RCC_ClockConfig+0x2ec>)
 80023dc:	5cd3      	ldrb	r3, [r2, r3]
 80023de:	fa21 f303 	lsr.w	r3, r1, r3
 80023e2:	4a08      	ldr	r2, [pc, #32]	; (8002404 <HAL_RCC_ClockConfig+0x2f0>)
 80023e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <HAL_RCC_ClockConfig+0x2f4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe f93e 	bl	800066c <HAL_InitTick>
  
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3778      	adds	r7, #120	; 0x78
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	08009068 	.word	0x08009068
 8002404:	20000000 	.word	0x20000000
 8002408:	20000004 	.word	0x20000004

0800240c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800240c:	b480      	push	{r7}
 800240e:	b08b      	sub	sp, #44	; 0x2c
 8002410:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002426:	4b29      	ldr	r3, [pc, #164]	; (80024cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b04      	cmp	r3, #4
 8002434:	d002      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0x30>
 8002436:	2b08      	cmp	r3, #8
 8002438:	d003      	beq.n	8002442 <HAL_RCC_GetSysClockFreq+0x36>
 800243a:	e03c      	b.n	80024b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800243c:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800243e:	623b      	str	r3, [r7, #32]
      break;
 8002440:	e03c      	b.n	80024bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002448:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800244c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	fa92 f2a2 	rbit	r2, r2
 8002454:	607a      	str	r2, [r7, #4]
  return result;
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	fab2 f282 	clz	r2, r2
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	40d3      	lsrs	r3, r2
 8002460:	4a1c      	ldr	r2, [pc, #112]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002462:	5cd3      	ldrb	r3, [r2, r3]
 8002464:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002466:	4b19      	ldr	r3, [pc, #100]	; (80024cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	220f      	movs	r2, #15
 8002470:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	fa92 f2a2 	rbit	r2, r2
 8002478:	60fa      	str	r2, [r7, #12]
  return result;
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	fab2 f282 	clz	r2, r2
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	40d3      	lsrs	r3, r2
 8002484:	4a14      	ldr	r2, [pc, #80]	; (80024d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002486:	5cd3      	ldrb	r3, [r2, r3]
 8002488:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002494:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	fbb2 f2f3 	udiv	r2, r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	fb02 f303 	mul.w	r3, r2, r3
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
 80024a4:	e004      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	4a0c      	ldr	r2, [pc, #48]	; (80024dc <HAL_RCC_GetSysClockFreq+0xd0>)
 80024aa:	fb02 f303 	mul.w	r3, r2, r3
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	623b      	str	r3, [r7, #32]
      break;
 80024b4:	e002      	b.n	80024bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024b8:	623b      	str	r3, [r7, #32]
      break;
 80024ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024bc:	6a3b      	ldr	r3, [r7, #32]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	372c      	adds	r7, #44	; 0x2c
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000
 80024d0:	007a1200 	.word	0x007a1200
 80024d4:	08009078 	.word	0x08009078
 80024d8:	08009088 	.word	0x08009088
 80024dc:	003d0900 	.word	0x003d0900

080024e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e049      	b.n	8002586 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d106      	bne.n	800250c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7fe f80c 	bl	8000524 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3304      	adds	r3, #4
 800251c:	4619      	mov	r1, r3
 800251e:	4610      	mov	r0, r2
 8002520:	f000 f944 	bl	80027ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d001      	beq.n	80025a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e038      	b.n	800261a <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a1c      	ldr	r2, [pc, #112]	; (8002628 <HAL_TIM_Base_Start+0x98>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00e      	beq.n	80025d8 <HAL_TIM_Base_Start+0x48>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c2:	d009      	beq.n	80025d8 <HAL_TIM_Base_Start+0x48>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a18      	ldr	r2, [pc, #96]	; (800262c <HAL_TIM_Base_Start+0x9c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d004      	beq.n	80025d8 <HAL_TIM_Base_Start+0x48>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a17      	ldr	r2, [pc, #92]	; (8002630 <HAL_TIM_Base_Start+0xa0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d115      	bne.n	8002604 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <HAL_TIM_Base_Start+0xa4>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b06      	cmp	r3, #6
 80025e8:	d015      	beq.n	8002616 <HAL_TIM_Base_Start+0x86>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f0:	d011      	beq.n	8002616 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0201 	orr.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002602:	e008      	b.n	8002616 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	e000      	b.n	8002618 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002616:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40012c00 	.word	0x40012c00
 800262c:	40000400 	.word	0x40000400
 8002630:	40014000 	.word	0x40014000
 8002634:	00010007 	.word	0x00010007

08002638 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_TIM_ConfigClockSource+0x18>
 800264c:	2302      	movs	r3, #2
 800264e:	e0a8      	b.n	80027a2 <HAL_TIM_ConfigClockSource+0x16a>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002672:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800267a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b40      	cmp	r3, #64	; 0x40
 800268a:	d067      	beq.n	800275c <HAL_TIM_ConfigClockSource+0x124>
 800268c:	2b40      	cmp	r3, #64	; 0x40
 800268e:	d80b      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x70>
 8002690:	2b10      	cmp	r3, #16
 8002692:	d073      	beq.n	800277c <HAL_TIM_ConfigClockSource+0x144>
 8002694:	2b10      	cmp	r3, #16
 8002696:	d802      	bhi.n	800269e <HAL_TIM_ConfigClockSource+0x66>
 8002698:	2b00      	cmp	r3, #0
 800269a:	d06f      	beq.n	800277c <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800269c:	e078      	b.n	8002790 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d06c      	beq.n	800277c <HAL_TIM_ConfigClockSource+0x144>
 80026a2:	2b30      	cmp	r3, #48	; 0x30
 80026a4:	d06a      	beq.n	800277c <HAL_TIM_ConfigClockSource+0x144>
      break;
 80026a6:	e073      	b.n	8002790 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80026a8:	2b70      	cmp	r3, #112	; 0x70
 80026aa:	d00d      	beq.n	80026c8 <HAL_TIM_ConfigClockSource+0x90>
 80026ac:	2b70      	cmp	r3, #112	; 0x70
 80026ae:	d804      	bhi.n	80026ba <HAL_TIM_ConfigClockSource+0x82>
 80026b0:	2b50      	cmp	r3, #80	; 0x50
 80026b2:	d033      	beq.n	800271c <HAL_TIM_ConfigClockSource+0xe4>
 80026b4:	2b60      	cmp	r3, #96	; 0x60
 80026b6:	d041      	beq.n	800273c <HAL_TIM_ConfigClockSource+0x104>
      break;
 80026b8:	e06a      	b.n	8002790 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80026ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026be:	d066      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x156>
 80026c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026c4:	d017      	beq.n	80026f6 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80026c6:	e063      	b.n	8002790 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	6899      	ldr	r1, [r3, #8]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f000 f95a 	bl	8002990 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	609a      	str	r2, [r3, #8]
      break;
 80026f4:	e04c      	b.n	8002790 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	6899      	ldr	r1, [r3, #8]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f000 f943 	bl	8002990 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002718:	609a      	str	r2, [r3, #8]
      break;
 800271a:	e039      	b.n	8002790 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6859      	ldr	r1, [r3, #4]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	461a      	mov	r2, r3
 800272a:	f000 f8b7 	bl	800289c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2150      	movs	r1, #80	; 0x50
 8002734:	4618      	mov	r0, r3
 8002736:	f000 f910 	bl	800295a <TIM_ITRx_SetConfig>
      break;
 800273a:	e029      	b.n	8002790 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	461a      	mov	r2, r3
 800274a:	f000 f8d6 	bl	80028fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2160      	movs	r1, #96	; 0x60
 8002754:	4618      	mov	r0, r3
 8002756:	f000 f900 	bl	800295a <TIM_ITRx_SetConfig>
      break;
 800275a:	e019      	b.n	8002790 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6818      	ldr	r0, [r3, #0]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	6859      	ldr	r1, [r3, #4]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	461a      	mov	r2, r3
 800276a:	f000 f897 	bl	800289c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2140      	movs	r1, #64	; 0x40
 8002774:	4618      	mov	r0, r3
 8002776:	f000 f8f0 	bl	800295a <TIM_ITRx_SetConfig>
      break;
 800277a:	e009      	b.n	8002790 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4619      	mov	r1, r3
 8002786:	4610      	mov	r0, r2
 8002788:	f000 f8e7 	bl	800295a <TIM_ITRx_SetConfig>
        break;
 800278c:	e000      	b.n	8002790 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800278e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a32      	ldr	r2, [pc, #200]	; (8002888 <TIM_Base_SetConfig+0xdc>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d007      	beq.n	80027d4 <TIM_Base_SetConfig+0x28>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ca:	d003      	beq.n	80027d4 <TIM_Base_SetConfig+0x28>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a2f      	ldr	r2, [pc, #188]	; (800288c <TIM_Base_SetConfig+0xe0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d108      	bne.n	80027e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a27      	ldr	r2, [pc, #156]	; (8002888 <TIM_Base_SetConfig+0xdc>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d013      	beq.n	8002816 <TIM_Base_SetConfig+0x6a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f4:	d00f      	beq.n	8002816 <TIM_Base_SetConfig+0x6a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a24      	ldr	r2, [pc, #144]	; (800288c <TIM_Base_SetConfig+0xe0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d00b      	beq.n	8002816 <TIM_Base_SetConfig+0x6a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a23      	ldr	r2, [pc, #140]	; (8002890 <TIM_Base_SetConfig+0xe4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d007      	beq.n	8002816 <TIM_Base_SetConfig+0x6a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a22      	ldr	r2, [pc, #136]	; (8002894 <TIM_Base_SetConfig+0xe8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d003      	beq.n	8002816 <TIM_Base_SetConfig+0x6a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a21      	ldr	r2, [pc, #132]	; (8002898 <TIM_Base_SetConfig+0xec>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d108      	bne.n	8002828 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800281c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4313      	orrs	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	4313      	orrs	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a0e      	ldr	r2, [pc, #56]	; (8002888 <TIM_Base_SetConfig+0xdc>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00b      	beq.n	800286c <TIM_Base_SetConfig+0xc0>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <TIM_Base_SetConfig+0xe4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d007      	beq.n	800286c <TIM_Base_SetConfig+0xc0>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a0d      	ldr	r2, [pc, #52]	; (8002894 <TIM_Base_SetConfig+0xe8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d003      	beq.n	800286c <TIM_Base_SetConfig+0xc0>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a0c      	ldr	r2, [pc, #48]	; (8002898 <TIM_Base_SetConfig+0xec>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d103      	bne.n	8002874 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	615a      	str	r2, [r3, #20]
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40012c00 	.word	0x40012c00
 800288c:	40000400 	.word	0x40000400
 8002890:	40014000 	.word	0x40014000
 8002894:	40014400 	.word	0x40014400
 8002898:	40014800 	.word	0x40014800

0800289c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800289c:	b480      	push	{r7}
 800289e:	b087      	sub	sp, #28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	f023 0201 	bic.w	r2, r3, #1
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f023 030a 	bic.w	r3, r3, #10
 80028d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	621a      	str	r2, [r3, #32]
}
 80028ee:	bf00      	nop
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b087      	sub	sp, #28
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	f023 0210 	bic.w	r2, r3, #16
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002924:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	031b      	lsls	r3, r3, #12
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002936:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	621a      	str	r2, [r3, #32]
}
 800294e:	bf00      	nop
 8002950:	371c      	adds	r7, #28
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800295a:	b480      	push	{r7}
 800295c:	b085      	sub	sp, #20
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002970:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	f043 0307 	orr.w	r3, r3, #7
 800297c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	609a      	str	r2, [r3, #8]
}
 8002984:	bf00      	nop
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	021a      	lsls	r2, r3, #8
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	609a      	str	r2, [r3, #8]
}
 80029c4:	bf00      	nop
 80029c6:	371c      	adds	r7, #28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e054      	b.n	8002a92 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a24      	ldr	r2, [pc, #144]	; (8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d108      	bne.n	8002a24 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002a18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a17      	ldr	r2, [pc, #92]	; (8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d00e      	beq.n	8002a66 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a50:	d009      	beq.n	8002a66 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a13      	ldr	r2, [pc, #76]	; (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d004      	beq.n	8002a66 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a11      	ldr	r2, [pc, #68]	; (8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d10c      	bne.n	8002a80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40012c00 	.word	0x40012c00
 8002aa4:	40000400 	.word	0x40000400
 8002aa8:	40014000 	.word	0x40014000

08002aac <__libc_init_array>:
 8002aac:	b570      	push	{r4, r5, r6, lr}
 8002aae:	4e0d      	ldr	r6, [pc, #52]	; (8002ae4 <__libc_init_array+0x38>)
 8002ab0:	4c0d      	ldr	r4, [pc, #52]	; (8002ae8 <__libc_init_array+0x3c>)
 8002ab2:	1ba4      	subs	r4, r4, r6
 8002ab4:	10a4      	asrs	r4, r4, #2
 8002ab6:	2500      	movs	r5, #0
 8002ab8:	42a5      	cmp	r5, r4
 8002aba:	d109      	bne.n	8002ad0 <__libc_init_array+0x24>
 8002abc:	4e0b      	ldr	r6, [pc, #44]	; (8002aec <__libc_init_array+0x40>)
 8002abe:	4c0c      	ldr	r4, [pc, #48]	; (8002af0 <__libc_init_array+0x44>)
 8002ac0:	f000 f820 	bl	8002b04 <_init>
 8002ac4:	1ba4      	subs	r4, r4, r6
 8002ac6:	10a4      	asrs	r4, r4, #2
 8002ac8:	2500      	movs	r5, #0
 8002aca:	42a5      	cmp	r5, r4
 8002acc:	d105      	bne.n	8002ada <__libc_init_array+0x2e>
 8002ace:	bd70      	pop	{r4, r5, r6, pc}
 8002ad0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ad4:	4798      	blx	r3
 8002ad6:	3501      	adds	r5, #1
 8002ad8:	e7ee      	b.n	8002ab8 <__libc_init_array+0xc>
 8002ada:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ade:	4798      	blx	r3
 8002ae0:	3501      	adds	r5, #1
 8002ae2:	e7f2      	b.n	8002aca <__libc_init_array+0x1e>
 8002ae4:	08009098 	.word	0x08009098
 8002ae8:	08009098 	.word	0x08009098
 8002aec:	08009098 	.word	0x08009098
 8002af0:	0800909c 	.word	0x0800909c

08002af4 <memset>:
 8002af4:	4402      	add	r2, r0
 8002af6:	4603      	mov	r3, r0
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d100      	bne.n	8002afe <memset+0xa>
 8002afc:	4770      	bx	lr
 8002afe:	f803 1b01 	strb.w	r1, [r3], #1
 8002b02:	e7f9      	b.n	8002af8 <memset+0x4>

08002b04 <_init>:
 8002b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b06:	bf00      	nop
 8002b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0a:	bc08      	pop	{r3}
 8002b0c:	469e      	mov	lr, r3
 8002b0e:	4770      	bx	lr

08002b10 <_fini>:
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	bf00      	nop
 8002b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b16:	bc08      	pop	{r3}
 8002b18:	469e      	mov	lr, r3
 8002b1a:	4770      	bx	lr
